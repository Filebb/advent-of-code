---
title: "Day 6: Probably a Fire Hazard"
---

[Reference](https://adventofcode.com/2015/day/6)

```{r}
#| label: 2015 - day 6 - load data

library(tidyverse)

input <- read_csv2(file = "inputs/2015/06.txt", col_names = "original")
```

## Part One

::: {.panel-tabset}

## Solution

```{r}
#| label: 2015 - day 6 - part 1

instructions <- input |> 
    mutate(instruction = str_extract(string = original, pattern = "toggle|turn on|turn off"),
           position    = str_extract_all(string = original, pattern = "[0-9]+")) |> 
    unnest_wider(col = position, names_sep = "_") |> 
    mutate(across(.cols = starts_with("position"), .fns = \(x) as.integer(x) + 1L)) |> 
    mutate(x_range = map2(.x = position_1, .y = position_3, .f = \(a, b) a:b),
           y_range = map2(.x = position_2, .y = position_4, .f = \(a, b) a:b))

# initial grid
grid_start <- matrix(FALSE, 1e3, 1e3)

action <- function(instruction, x_range, y_range, grid) {
    if (instruction == "toggle")
        grid[x_range, y_range] <- !grid[x_range, y_range]
    
    else if (instruction == "turn on")
        grid[x_range, y_range] <- TRUE
    
    else if (instruction == "turn off")
        grid[x_range, y_range] <- FALSE
    
    return(grid)
}

# initialize list
grid_story <- vector(mode = "list", length = nrow(instructions))
for (i in 1:nrow(instructions)) grid_story[[i]] <- grid_start

# perform instructions
for (i in seq_along(grid_story)) {
    
    if (i == 1) {
        grid_story[[1]] <- action(instruction = instructions[[1, "instruction"]][[1]],
                                  x_range     = instructions[[1, "x_range"]][[1]],
                                  y_range     = instructions[[1, "y_range"]][[1]],
                                  grid        = grid_story[[1]])
    } else {
        grid_story[[i]] <- action(instruction = instructions[[i, "instruction"]][[1]],
                                  x_range     = instructions[[i, "x_range"]][[1]],
                                  y_range     = instructions[[i, "y_range"]][[1]],
                                  grid        = grid_story[[i-1]])
    }
}

instructions <- instructions |> 
    mutate(grid = grid_story,
           n_on = map_int(grid, sum))

instructions |> 
    tail(1) |> 
    pull(n_on) |> 
    cat()
```

## Full Table

```{r}
#| label: 2015 - day 2 - pat 1 full table
#| echo: false

instructions |> 
    select(-x_range, -y_range, -grid) |> 
    rmarkdown::paged_table()
```

## Plot

```{r}
#| label: 2015 - day 2 - pat 1 plot
#| echo: false

library(scales)

instructions |> 
    ggplot(mapping = aes(x = 1:nrow(instructions), y = n_on)) +
    geom_line() +
    scale_y_continuous(labels = scales::label_number(scale_cut = cut_short_scale())) +
    theme_bw() +
    labs(x = "step", y = "# lights on")
```

:::

## Part Two

::: {.panel-tabset}

## Solution

```{r}
#| label: 2015 - day 6 - part 2

# initial grid
grid_start <- matrix(0, 1e3, 1e3)

new_action <- function(instruction, x_range, y_range, grid) {
    if (instruction == "toggle")
        grid[x_range, y_range] <- grid[x_range, y_range] + 2

    else if (instruction == "turn on")
        grid[x_range, y_range] <- grid[x_range, y_range] + 1

    else if (instruction == "turn off") 
        grid[x_range, y_range] <- pmax(grid[x_range, y_range] - 1, 0)
    
    return(grid)
}

# initialize list
grid_story <- vector(mode = "list", length = nrow(instructions))
for (i in 1:nrow(instructions)) grid_story[[i]] <- grid_start

# perform instructions
for (i in seq_along(grid_story)) {
    
    if (i == 1) {
        grid_story[[1]] <- new_action(instruction = instructions[[1, "instruction"]][[1]],
                                      x_range     = instructions[[1, "x_range"]][[1]],
                                      y_range     = instructions[[1, "y_range"]][[1]],
                                      grid        = grid_story[[1]])
    } else {
        grid_story[[i]] <- new_action(instruction = instructions[[i, "instruction"]][[1]],
                                      x_range     = instructions[[i, "x_range"]][[1]],
                                      y_range     = instructions[[i, "y_range"]][[1]],
                                      grid        = grid_story[[i-1]])
    }
}

instructions <- instructions |> 
    mutate(grid       = grid_story,
           brightness = map_int(grid, sum))

instructions |> 
    tail(1) |> 
    pull(brightness) |> 
    cat()
```

## Full Table

```{r}
#| label: 2015 - day 2 - pat 2 full table
#| echo: false

instructions |> 
    select(-x_range, -y_range, -grid, -n_on) |> 
    rmarkdown::paged_table()
```

## Plot

```{r}
#| label: 2015 - day 2 - pat 2 plot
#| echo: false

library(scales)

instructions |> 
    ggplot(mapping = aes(x = 1:nrow(instructions), y = brightness)) +
    geom_line() +
    scale_y_continuous(labels = scales::label_number(scale_cut = cut_short_scale())) +
    theme_bw() +
    labs(x = "step", y = "total brightness")
```

:::

```{r}
#| label: 2015 - day 6 - part 1 (old version)
#| echo: false
#| eval: false

library(tidyverse)

input <- read_lines(file = "inputs/2015/06.txt")

grid <- matrix(FALSE, 1e3, 1e3)

for (instruction in input) {
    command <- str_extract(instruction, pattern = "toggle|turn on|turn off")[1]

    location <- str_extract_all(instruction, pattern = "[0-9]+")[[1]]
    location <- as.numeric(location) + 1
    
    x_range <- location[1]:location[3]
    y_range <- location[2]:location[4]
    
    if (command == "toggle")
    grid[x_range, y_range] <- !grid[x_range, y_range]
    
    else if (command == "turn on")
    grid[x_range, y_range] <- TRUE
    
    else if (command == "turn off")
    grid[x_range, y_range] <- FALSE
}

cat(sum(grid))
```

```{r}
#| label: 2015 - day 6 - part 1 (test data)
#| echo: false
#| eval: false

# test initial grid
grid_start <- matrix(FALSE, 5, 5)

# test data
instructions <- tribble(~instruction, ~position_1, ~position_2, ~position_3, ~position_4,
                        "turn on",  2L, 2L, 4L, 4L,
                        "turn off", 3L, 1L, 5L, 3L,
                        "toggle",   1L, 1L, 5L, 5L,
                        "turn off", 4L, 1L, 5L, 2L) |>
                mutate(x_range = map2(.x = position_1, .y = position_3, .f = \(a, b) a:b),
                       y_range = map2(.x = position_2, .y = position_4, .f = \(a, b) a:b))
```

```{r}
#| label: 2015 - day 6 - part 2 (old version)
#| echo: false
#| eval: false

grid <- matrix(0, 1e3, 1e3)

for (instruction in input) {

    command <- str_extract(instruction, pattern = "toggle|turn on|turn off")[1]

    location <- str_extract_all(instruction, pattern = "[0-9]+")[[1]]
    location <- as.numeric(location) + 1

    x_range <- location[1]:location[3]
    y_range <- location[2]:location[4]

    if (command == "toggle")
        grid[x_range, y_range] <- grid[x_range, y_range] + 2

    else if (command == "turn on")
        grid[x_range, y_range] <- grid[x_range, y_range] + 1

    else if (command == "turn off")
        grid[x_range, y_range] <- pmax(grid[x_range, y_range] - 1, 0)
}

cat(sum(grid))
```

```{r}
#| label: 2015 - day 6 - part 2 (test data)
#| echo: false
#| eval: false

# test initial grid
grid_start <- matrix(0, 5, 5)

# test data
instructions <- tribble(~instruction, ~position_1, ~position_2, ~position_3, ~position_4,
                        "turn on",  2L, 2L, 4L, 4L,
                        "turn off", 3L, 1L, 5L, 3L,
                        "toggle",   1L, 1L, 5L, 5L,
                        "turn off", 4L, 1L, 5L, 2L) |>
                mutate(x_range = map2(.x = position_1, .y = position_3, .f = \(a, b) a:b),
                       y_range = map2(.x = position_2, .y = position_4, .f = \(a, b) a:b))
```
